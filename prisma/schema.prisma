datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  following     Follow[] @relation("following")
  followed      Follow[] @relation("followed")
  posts         Post[] @relation()
  likes         Like[]
  replies       Postreply[] 
  reply         Reply[]

  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Follow {
  id           String   @id @default(cuid())
  following    User @relation("following", references: [id], fields: [followingId], onDelete: Cascade)
  followingId  String
  followed     User @relation("followed", references: [id], fields: [followedId], onDelete: Cascade)
  followedId   String
}

model Post {
  id           String   @id @default(cuid())
  user         User @relation(references: [id], fields: [userId])
  userId       String
  content      String
  created_at   DateTime @default(now())
  likes        Like[]
  replies      Postreply[] 
}

model Like {
  id      String @id @default(cuid())
  post    Post? @relation(references: [id], fields: [postId], onDelete: Cascade)
  postId  String?
  user    User @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId  String
  reply   Postreply? @relation(references: [id], fields: [replyId], onDelete: Cascade)
  replyId String?
}

model Postreply {
  id      String @id @default(cuid())
  post    Post @relation(references: [id], fields: [postId], onDelete: Cascade)
  postId  String
  user    User @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId  String
  likes   Like[]
  content String
  created_at DateTime @default(now())
  replies Reply[]
}

model Reply {
  id      String @id @default(cuid())
  reply   Postreply @relation(references: [id], fields: [replyId], onDelete: Cascade)
  replyId String
  user    User @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId  String
  content String
  created_at DateTime @default(now())
}
